<?php
// This code prevents page caching

	header("Cache-Control: no-cache, must-revalidate"); // HTTP/1.1			
	header("Expires: Sat, 26 Jul 1997 05:00:00 GMT"); 	// Date in the past	
	header("Pragma: no-cache");
?> 

<?php
// Normally, we would place our database connectivity code here.				
// In the case of this 1-2-3 example, you will find it embedded in Step3 below.	

?>

<html>
 
<head>
	<title>Simple Scripting Demo</title>
</head>

<body />

<br />
<h3><b><font color="#000000">Ryan's Product Demo</font><br><br></h3>
<?php 
        // "Database Connectivity"
        // Normally, because you only have to connect once per page,
	// you would put this at the top of the page.				

	// Server													
	$db_server = "localhost";
  
	// Database username (root is default)						
	$db_user = "root";
  
	// Database password 										
	// Our database doesn't have a password						
	$db_passwd = "";
  
	// Database name 											
	// In this example, should be the one you created in phase 1	
	$db_name = "ProductsDemo";
	
	// 1. Create a connection to the local database				
	$db_connected = mysqli_connect($db_server, $db_user, $db_passwd,$db_name) 
		or die("Not connected : " . mysql_error());

// End of "Database Connectivity"		
?>

<?php
// "Retrieve Desired Record Set"

	// If you only plan on executing one SQL statement, you would put this at the top of the page.  
	// If you plan on multiple SQL queries, depending on logic, you could embed in the page. 		
	// In the case of this simple example, I would put this at the top of the page.					

	// Build your SQL query string... MAKE SURE you select all the fields you need!	
	$strCategory = "Tools";
	$strSQL = "SELECT * FROM Products WHERE Category = '$strCategory' ORDER BY ID";
	// Misspell one of the above fieldnames and see what error you get on your webpage.				
	
	// or  $strSQL = "SELECT * FROM Products WHERE Category = '$strCategory' ORDER BY ID";				
	// SELECT * is a bad lazy habit to get into.  If you have a large database with many fields,		
	// selecting all of them to save you typing impacts heavily on your server resources!				
	
		
	// For a better understanding of PHP string characteristics, see the StringsDemo.php page.
	
	// 3. Execute SQL to seed a "Products Record Set" variable										
	// As always, it is recommended to use relevent variable names.									
	$rsProd = mysqli_query($db_connected, $strSQL)
		or die($db_name . " : " . $strSQL . " : " . mysql_error());
		
// End Of "Retrieve Desired Record Set"
?>
<p><b><font color="#000000">Step 3 : The next ??? products are generated by scripting, bringing content in from the database ProductsDemo.
<br />Only certain records (Tools category) will be displayed!</font></b></p>



<p><b>
<!-- Normally, we would not show this to the user! 									--> 
<!-- This is useful debug code so you can see what is going on behind the scenes 	-->
<font color="#ff0000">Connected to :: </font><?php echo $db_name; ?> <br />
<font color="#ff0000">Using SQL :: </font><?php echo $strSQL; ?> <br />
<font color="#ff0000">Records retrieved :: </font><?php echo mysqli_num_rows($rsProd); ?> <br /><br />
</b></p>

<?php 
// "Display Individual Records"

  // 4. Since in our example our SQL has probably returned more than one record,									
  //    we need to loop through "Products Record Set" to grab each "product row" 									
  
  // 	"mysql_fetch_array(???)" is a function that reads a single record (row) from the provided ??? recordset.	
  
  while ($rowProd = mysqli_fetch_array($rsProd)) {
  
    //    Obviously, if you know your previous logic does not retrieve multiple records, you would not need to loop!	
	//	  Keep that in mind for future exercises.
   	   
	   //  Note how the database content is displayed				
	   //  Note the image filename... now pulled from the database, and injected into an HTML statement
	   
	   echo '
		  <hr /><br />
		  <img src="images/' 		. $rowProd["Image"] . '.gif" height=100 width=100 align=left />
		  Item #' 					. $rowProd["ID"] .  
		  '<br />Price :: ' 		. number_format($rowProd["Price"], 2, ".", ",") . 
		  '<br />Category :: ' 		. $rowProd["Category"] . 
		  '<br />Description<br />'     .   $rowProd["Description"] .
		'';
		
		// You can't put logic inside an echo, so we closed it above.							
		// Now we can execute some further logic...
		
		// Display Option1... currently all hardcoded.		
		// Change to be dynamic, from database.
		if ($rowProd["Option1Desc"] != "")
                    {
			echo '
				<br clear=all /><br />'.$rowProd["Option1Desc"].
                                ': <br />';
                        echo'<ul>';
                        if ($rowProd["Option1a"] != "")
                            {echo '<li>'.$rowProd["Option1a"] .'</li>';}
			if ($rowProd["Option1b"] != "")
                            {echo '<li>'.$rowProd["Option1b"] .'</li>';}
                            if ($rowProd["Option1c"] != "")
                            {echo '<li>'.$rowProd["Option1c"] .'</li>';}
                            if ($rowProd["Option1d"] != "")
                            {echo '<li>'.$rowProd["Option1d"] .'</li>';}
			echo'</ul>';
			
		}
                if ($rowProd["Option2Desc"] != "")
                    {
			echo '
				<br clear=all /><br />'.$rowProd["Option2Desc"].
                                ': <br />';
                        echo'<ul>';
                        if ($rowProd["Option2a"] != "")
                            {echo '<li>'.$rowProd["Option2a"] .'</li>';}
			if ($rowProd["Option2b"] != "")
                            {echo '<li>'.$rowProd["Option2b"] .'</li>';}
                            if ($rowProd["Option2c"] != "")
                            {echo '<li>'.$rowProd["Option2c"] .'</li>';}
                            if ($rowProd["Option2d"] != "")
                            {echo '<li>'.$rowProd["Option2d"] .'</li>';}
			echo'</ul>';
			
		}	
} // End of the while		

// End of "Display Individual Records"	
?>
</BODY>
</HTML>
